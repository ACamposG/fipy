=============
SVN practices
=============

Refer to SVN.txt for the current tagging conventions.

--------
Branches
--------

The following needs to be updated as we become more experienced with SVN

Break off for radical refactoring. We will use the following method to
preserve the tags/ and branches/ policy, though not strictly necessary
with SVN, *Starting at base of trunk*::
    
    $ export BRANCH=branch-refactoring_etc
    $ export FIPYROOT=svn+ssh://username@matdl-osi.org/usr/local/svn-fipy-repos/
    $ svn copy $FIPYROOT/trunk $FIPYROOT/tags/root-$BRANCH -m "creating tag for $BRANCH"
    $ svn copy $FIPYROOT/trunk $FIPYROOT/branches/$BRANCH -m "creating branch for $BRANCH"
    $ cd ..
    $ svn co $FIPYROOT/branches/$BRANCH
    $ cd $BRANCH

Edit and add to branch::

    $ emacs ...
    $ svn ci -m "refactoring_stage_A"
    $ svn copy $FIPYROOT/$BRANCH $FIPYROOT/tags/refactoring_stage_A -m "refactoring_stage_A"
    $ emacs ...
    $ svn ci -m "refactoring_stage_B"
    $ svn copy $FIPYROOT/$BRANCH $FIPYROOT/tags/refactoring_stage_A -m "refactoring_stage_A"

Merge developments from trunk::

    $ svn copy $FIPYROOT/trunk 


    $ cvs tag -r HEAD somePointOnTrunk
    $ cvs up -j somePointOnTrunk
    $ python setup.py test
    $ cvs ci -m "merged main trunk"
    $ cvs tag merge-somePointOnTrunk_to_refactoring

Refactoring complete::

    $ cvs tag merged-to_HEAD
    $ cd ../trunk
    $ cvs up -j branch-refactoring_etc
    $ python setup.py test
    $ cvs ci -m "merged refactoring, etc."
    $ cvs tag merge-refactoring_etc

**Now cease all work on branch-refactoring_etc**

Optionally 

    $ cd ../branch-refactoring_etc
    $ echo "Branch merged back to HEAD: `date`" > "THIS BRANCH IS FINISHED"
    $ cvs add "THIS BRANCH IS FINISHED"
    $ cvs ci -m "" "THIS BRANCH IS FINISHED"

(must do in directory above branch directory)

    $ cd ..
    $ cvs -d :ext:USERNAME@cvs.sourceforge.net:/cvsroot/fipy release branch-refactoring_etc 

--------
Versions
--------

At point of version release x.y, *on main trunk*::

    $ cvs tag version-x_y
    $ cvs tag -r version-x_y -F STABLE
    $ cvs tag -r version-x_y -F CURRENT

---------
Bug fixes
---------

At the point some fix is made to an old version n.m, *on main trunk*::

    $ cvs tag -r version-n_m -b branch-version-n_m
    $ cd ..
    $ cvs co -r branch-version-n_m -d branch-version-n_m fipy
    $ cd branch-version-n_m

Fix the code::

    $ cvs ci -m "fix n.m.q"
    $ cvs tag version-n_m_q

Possibly::

    $ cvs tag -F STABLE

Now merge n.m.q changes back to main trunk::

    $ cd ../trunk
    $ cvs up -j branch-version-n_m
    $ cvs ci -m "merged n.m.q"
    $ cvs tag merge-version-n_m_q

Possibly::

    $ cvs tag -F CURRENT

Make new fix q+1 to n.m::

    $ cd ../branch-version-n_m 
    
Fix the code::

    $ cvs ci -m "fix n.m.q+1"
    $ cvs tag version-n_m_q+1

Again, merge n.m.q+1 changes back to main trunk::

    $ cd ../trunk
    $ cvs up -j version-n_m_q -j branch-version-n_m_q+1
    $ cvs ci -m "merged n.m.q+1"
    $ cvs tag merge-version-n_m_q+1

.. danger::

   The double ``-j`` is very important to get right.


================
Making a Release
================

Change the version number in fipy/__init__.py

Check items in TODOLIST.txt

Tag the repository as appropriate (see `CVS practices`_ above).

Check out a clean copy of the desired release::

    $ cvs -z3 -d:ext:<USERNAME>@cvs.sourceforge.net:/cvsroot/fipy checkout -r <TAG> -d <TAG> fipy
    $ cd <TAG>

.. note:: It is not necessary to ``cvs export`` as the Python distutils
   routines will omit all of the CVS files automatically.

Run the test suite!:

    $ python setup.py test
    $ python setup.py test --inline

.. attention:: If tests don't pass, make sure the release notes reflect 
   that fact!

Build the documentation and the web pages::

    $ python setup.py build_docs --manual --latex --webpage

Build the compressed distribution::

    $ rm MANIFEST
    $ python setup.py sdist

Build a windows executable installer::

    $ rm MANIFEST
    $ python setup.py bdist --formats=wininst

Combine the windows installer and examples into one tar ball.

    $ rm MANIFEST
    $ python setup.py sdist --template=MANIFEST-WINDOWS.in --dist-dir=dist-windows --no-defaults
    $ set FIPY_VERSION=XXX
    $ mv dist-windows/FiPy-${FIPY_VERSION}.tar.gz dist/FiPy-${FIPY_VERSION}.win32.tar.gz

Upload to the CTCMS website::

    $ python setup.py build_docs --upload

.. warning:: Some versions of ``rsync`` on Mac OS X have caused problems
   when they try to upload erroneous ``\rsrc`` directories. Version 2.6.2
   does not have this problem.

`Upload the release to SourceForge`_.  You can use, e.g.,::

    cvs2cl.pl --branches --tagdates --utc --usermap documentation/UFILE.txt --delta version-1_0a1:HEAD --hide-filenames

to build the ChangeLog.

Make an announcement to `fipy@nist.gov`_


.. Upload the release to SourceForge: https://sourceforge.net/project/admin/qrs.php?package_id=&group_id=118428
.. fipy@nist.gov: mailto:fipy@nist.gov

==========================================
Making a Windows Distribution for Pysparse
==========================================

Make sure of the following:

   - mingw is installed
   - libpython.a is in c:\pythonXX\libs
   - libblas.a is in c:\mingw\lib
   - liblapack.a is in c:\mingw\lib
   - Numeric is installed

If the above is not satisfied implement the Pysparse INSTALL instructions.

Set the PATH to use MINGW's tools.

   set PATH=C:\mingw\bin

Build the distribution.

   C:\pythonXX\python setup.py build --compiler=mingw32 bdist --format=wininst

.. include:: utils/include.txt

.. |FiPy| replace:: |htmlFiPy| |latexFiPy|

================================
Converting CVS Repository to SVN
================================

Jon can fill in the details