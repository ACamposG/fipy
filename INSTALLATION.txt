============
Installation
============

The |FiPy| finite volume PDE solver relies on several third-party packages.
It is *best to obtain and install those first*, before attempting to install
|FiPy|.

|outsideLinks|

.. note::

   Most of the installation steps will involve a variant on the command::

       $ python setup.py ...

   In addition to the specific commands given here, further information
   about each ``setup.py`` script is available by typing::

       $ python setup.py --help

   For each package, please follow any instructions given in its `README` or 
   `INSTALLATION` files.

----------
Privileges
----------

If you do not have administrative privileges on your computer, or if for
any reason you don't want to tamper with your existing Python_
installation, most packages (including |FiPy|) will allow you to install to
an alternate location.  Instead of installing these packages with
``python setup.py install``,
you would use
``python setup.py install --home=<dir>``,
where ``<dir>`` is the desired installation directory (usually "``~``" to
indicate your home directory).  You will then need to append
``<dir>/lib/python`` to your ``PYTHONPATH`` environment variable.  See the
`Alternate Installation`_ section of the Python_ document "`Installing
Python Modules`_" |citeInstallingPythonModules| for more information, such
as circumstances in which you should use ``--prefix`` instead of
``--home``.

.. _Alternate Installation: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://docs.python.org/inst/alt-install-windows.html

.. _Installing Python Modules: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://docs.python.org/inst/


-------------
Prerequisites
-------------

Operating System
================

|FiPy| has been developed and tested on the following operating
systems, `Mac OS X`_ 10.3, `Debian Linux`_ 3.0, `Windows XP`_ and
`Windows 2000`_.  We welcome reports of compatibility with other
systems, along with any steps necessary to install.

The only elements of |FiPy| that are likely to be platform-dependent
are the viewers, but at least one viewer will work on each platform.
All other aspects should function on any platform that has a recent
Python_ installation.

Many of the packages listed below have prebuilt installers for different
platforms (particularly for Windows).  These installers can save considerable
time and effort compared to configuring and building from source, although
they frequently comprise somewhat older versions of the respective code.
Whether building from source or using a prebuilt installer, please read and
follow explicitly any instructions given in the respective packages'
``README`` and ``INSTALLATION`` files.

.. _Mac OS X: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.apple.com/macosx/
.. _Debian Linux:   http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.debian.org/
.. _Windows XP: http://www.microsoft.com/windowsxp/default.mspx
.. _Windows 2000: http://www.microsoft.com/windows2000/

Required Packages
=================

.. warning::

   |FiPy| will not run if the following items are not installed.

Python
------

http://www.python.org/

|FiPy| is written in the Python_ language and requires a Python_
installation to run.  Python_ comes pre-installed on many operating
systems, which you can check by opening a terminal and typing
``python``, *e.g.*::

    $ python
    Python 2.3 (#1, Sep 13 2003, 00:49:11) 
    ...
    Type "help", "copyright", "credits" or "license" for more information.
    >>> 

If necessary, you can download_ and install it for your platform.
`Python Windows installers`_ are available.

.. note::

   |FiPy| requires at least version 2.3 of Python_.

.. warning::

   |FiPy| version 1.0a1 and older are not compatible with version 2.4 of
   Python_.  The problem will be fixed in the next release and is available
   now via CVS_.

.. _Python:   http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.python.org/
.. _download: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.python.org/download/
.. _Python Windows installers: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.python.org/download/

Numeric
-------

http://sourceforge.net/projects/numpy

Obtain and install the Numeric_ package. |FiPy| requires at least
version 23.1 of Numeric_ but has not been tested with version 24. The
newer Numarray_ package is not supported at this time. `Numeric
Windows installers`_ are available.

.. note:: 

   Because of a peculiarity_ in the way that Numeric_ is structured, the
   ``--home=<dir>`` installation option described in Privileges_ will not
   work quite as intended.  To correct this problem, add
   ``<dir>/lib/python/Numeric`` to your ``PYTHONPATH`` environment
   variable.

.. _Numeric:  http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://sourceforge.net/project/showfiles.php?group_id=1369&package_id=1351
.. _Numarray: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.stsci.edu/resources/software_hardware/numarray
.. _peculiarity: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.scipy.org/documentation/mailman?fn=scipy-dev/2002-December/thread.html#1443
.. _Numeric Windows installers: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://sourceforge.net/project/showfiles.php?group_id=1369&package_id=1351

PySparse
--------

http://pysparse.sourceforge.net

|FiPy| requires `Roman Geus`_' PySparse_ package.

You can either `download the PySparse archive`_ or check it out via
anonymous CVS download::

    $ cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/pysparse login

and press enter at the password prompt, then::

    $ cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/pysparse checkout pysparse

From within the ``pysparse`` base directory, follow its included
instructions for building PySparse_ for your platform. `PySparse Windows
installers`_ are available.

.. note::

   Windows users should consult the INSTALL file in the base PySparse_
   directory for specialist instructions.

.. _Roman Geus: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://people.web.psi.ch/geus/
.. _PySparse: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://pysparse.sourceforge.net
.. _download the PySparse archive: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://sourceforge.net/project/showfiles.php?group_id=101403
.. _PySparse Windows installers: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://sourceforge.net/project/showfiles.php?group_id=101403

Viewers
=======

|FiPy| will work perfectly well without them, but at least one of the
following packages will be required to view the results of |FiPy|
calculations. |FiPy| will select the first viewer that is available
from the list below.  If more than one is installed, specify a viewer
by setting the FIPY_VIEWER environment variable to either 'gist',
'gnuplot' or 'matplotlib'.

Pygist
------

http://bonsai.ims.u-tokyo.ac.jp/~mdehoon/software/python/pygist.html

The Pygist_ package can be used to display simulation results. It
displays both 1D X-Y type plots and 2D contour plots for both
structured and unstructured data. It does not display 3D
data. Although stated as working on Windows, it does not seem to do a
good job of rendering on this platform. Pygist_ works fine on other
common platforms. Don't use Pygist_ if you wish to produce hard
copies, as this facility doesn't work.

.. note::

   If you experience difficulty building the native Pygist_ viewer on `Mac OS
   X`_, you may wish to to build the package with the ``--x11`` option
   described in its documentation.

.. _Pygist: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://bonsai.ims.u-tokyo.ac.jp/~mdehoon/software/python/pygist.html

Matplotlib
----------

http://matplotlib.sourceforge.net

Matplotlib_ is a Python_ package that displays publication quality
results. It displays both 1D X-Y type plots and 2D contour plots for
structured data. It does not display unstructured 2D data or 3D data.
It works on all common platforms and produces publication quality hard
copies. Version 0.72.1 or higher is required. `Matplotlib Windows
installers`_ are available.

.. _Matplotlib:  http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://matplotlib.sourceforge.net
.. _Matplotlib Windows installers: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://sourceforge.net/project/showfiles.php?group_id=80706&package_id=82474


Gnuplot-py
----------

http://gnuplot-py.sourceforge.net

Gnuplot.py_ is a Python_ package that interfaces to gnuplot_, the
popular open-source plotting program. It displays both 1D X-Y type
plots and 2D contour plots for structured data but not for
unstructured data or 3D data. It works on all common platforms and
produces hard copies. However, it sometimes breaks on Windows. As a
general remark, the viewing quality using either Pygist_ or
Matplotlib_ is preferable.

.. _Gnuplot:         http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://gnuplot.sorceforge.net/
.. _Gnuplot.py:       http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://gnuplot-py.sourceforge.net

Recommended Packages
====================

.. note::

   These packages are not required to run |FiPy|, but they can be helpful.

SciPy
-----

http://www.scipy.org/

Significantly improved performance has been achieved with the
judicious use of C language inlining, via the weave_ module of the
SciPy_ package. `Scipy Windows installers`_ are available.

In addition, a handful of test cases use functions from the SciPy_ library.

.. _weave: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.scipy.org/documentation/weave/
.. _SciPy: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.scipy.org/
.. _Scipy Windows installers:   http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.scipy.org/download/

gmsh
----

http://www.geuz.org/gmsh/

It is possible to create irregular meshes with this package.

.. note::

   The `Mac OS X`_ distribution of gmsh provides a nice graphical tool, but
   is structured a bit differently than on other platforms.  To access the
   underlying shell tool, create a shell alias called ``gmsh`` that
   corresponds to ``<Gmsh path>/Gmsh.app/Contents/MacOS/Gmsh``.

----------------
Obtaining |FiPy|
----------------

|FiPy| is freely available for download via CVS_ or as a `compressed
archive`_.  We recommend CVS_ over archives at this early stage of the
development cycle.  To obtain |FiPy| via anonymous CVS, issue the following
commands::

    $ cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/fipy login

and press enter at the password prompt, then to download |FiPy| 1.0 
(recommended)::

    $ cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/fipy checkout -r CURRENT fipy

If you prefer, you can download |FiPy| 0.1 with::

    $ cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/fipy checkout -r STABLE fipy

Further information about CVS_ can be found in |documentation:CVS.txt| and
at http://sourceforge.net/cvs/?group_id=118428.

.. _compressed archive:   http://www.ctcms.nist.gov/fipy/download/

Manual
======

.. raw:: html

   The manual can be found in 
   <tt class="literal"><span class="pre">download/</span></tt>

You can `download the latest manual`_ or, if you have obtained |FiPy| via
CVS_, a fresh copy can be built by issuing the following command in the
base directory::

    $ python setup.py build_docs --latex --manual

The epydoc_ package and a command-line pdfTeX installation are required in
order to build the manual.

.. _download the latest manual:  http://www.ctcms.nist.gov/fipy/download/
.. _epydoc:                      http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://epydoc.sourceforge.net/

--------------
Testing |FiPy|
--------------

From the base directory, you can verify that |FiPy| works properly by
executing::

    $ python setup.py test

Depending on the packages you chose to install in `Recommended Packages`_,
be sure to set the appropriate environment variables.  You can expect a few
errors if you did not install all of the recommended packages.

If you chose to install the `weave`_ package, you should rerun the
tests with::

    $ python setup.py test --inline

A few tests will fail the first time as a result of the messages output in
the course of caching the compiled inline code, but a repeat test should
have no failures.

.. note::

   In order for Python_ to find the |FiPy| modules, you will need to ensure
   that the base directory is added to your ``PYTHONPATH`` environment
   variable, *e.g.*::

       $ setenv PYTHONPATH .:${PYTHONPATH}

   or::

       $ export PYTHONPATH=.:${PYTHONPATH}
       
.. note::

   The tests ``examples.diffusion.nthOrder.input4thOrder-line`` and
   ``examples.elphf.diffusion.input1Ddimensional`` are expected to fail.

-----------------
Installing |FiPy|
-----------------

Once you are confident that all of the requisite packages have been
installed properly and |FiPy| passes its tests, you can install it by
typing::

    $ python setup.py install

at the command line.  Alternatively, you may choose not to formally install
|FiPy| and to simply work within the base directory instead.  

.. warning::

   Keep in mind that you will then need to preserve your changes when
   upgrades to |FiPy| become available (upgrades via CVS_ will handle this
   issue automatically).

If you choose to install, Python_ will find your |FiPy| modules 
automatically. If you choose not to install, then you will need to ensure 
that the |FiPy| distribution directory is appended to your ``PYTHONPATH`` 
environment variable (either ``.`` if you are working within the |FiPy| 
directory, or ``~/path/to/fipy`` if you are working in your own directory).

------------
Using |FiPy|
------------

To see examples of problems that |FiPy| is capable of solving, you can
run any of the scripts in |examples/|. All should have appropriate
executable permissions, allowing you to type, *e.g.*::

    $ examples/diffusion/steadyState/mesh1D/input.py

at the command line, which should produce a graphical display of the
solution. 

With judicious use of the weave_ package, we have been able to obtain
significantly improved performance, while keeping the code as clear as
possible.  You can invoke this faster code by passing the ``--inline``
option at the command line, *i.e.*::

    $ examples/diffusion/steadyState/mesh1D/input.py --inline

In order to customize the examples, or to develop your own scripts, some
knowledge of Python syntax is required.  We recommend you familiarize
yourself with the excellent `Python tutorial`_ |citePythonTutorial|.

.. _Python tutorial: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://docs.python.org/tut/tut.html
.. _CVS:             http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://cvs.sourceforge.net/viewcvs.py/fipy/

.. include:: utils/include.txt

.. |FiPy| replace:: |htmlFiPy| |latexFiPy|
.. |TeX| replace:: |latexTeX| |htmlTeX|
.. |examples/| replace:: |latexExamples/| |htmlExamples/|

.. |documentation:CVS.txt| replace:: |latexCVS.txt| |htmlCVS.txt|

.. |citeInstallingPythonModules| raw:: latex

   \cite{InstallingPythonModules}

.. |citePythonTutorial| raw:: latex

   \cite{PythonTutorial}

.. |outsideLinks| raw:: html

    <div class="note">
    <p class="admonition-title">Note</p>
    By selecting the links on this page, you will be leaving NIST webspace.
    We have provided these links to other web sites because they may have
    information that would be of interest to you.  No inferences should be
    drawn on account of other sites being referenced, or not, from this
    page.  There may be other web sites that are more appropriate for your
    purpose.  NIST does not necessarily endorse the views expressed, or
    concur with the facts presented on these sites.  Further, NIST does not
    endorse any commercial products that may be mentioned on these sites.
    Please address comments about this page to <a class="reference"
    href="mailto:fipy@nist.gov">fipy@nist.gov</a>.
    </div>
