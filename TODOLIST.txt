-----------
Future Work
-----------

Release goals 0.1
-----------------

- Documentation:

  * Manual and web site WERBed.
  * Review Process.
  * Some of the pickled data for the test cases requires a
    scipy installation and thus users without scipy have test failures.
    This data should be independent of scipy???

- Distribution:

  * Add fipy to sourceforge
  * Create tarball v 0.1
  * Add pysparse to sourceforge
  * Clean install on Mac
  * Clean install on Debian linux

Release Goals 0.2
-----------------

- Documentation:

  * Include some examples on the web page.
  * Include some pictures of simulations on the web page.
  * Efficiency and --inline discussion.
  * Examples:
  
    - 1000*1000 example for efficiency discussion.
    - Explicit example.

- Distribution

  * Install and test with no write permissions.
  * Windows install.
   
- Functionality:

  * Linear Algebra:

    - Iterative solver in place of superLU for non-symmetric matrices
    
  * Viewing variables on an unstructured mesh.

    - gnuplot
    - gist  

  * Gnuplot-py:

    - Viewing of variables for Grid2D objects.
    - Justification:

      * Gnuplot is available on Windows and it is standard on unix and linux platforms.
      * Gnuplot-py is easy to install and is well supported.
      * Gnuplot version 4.0 looks good for contour plots.
      * Much faster than PyX. PyX is very slow for plotting large contour plots.
      * The gist hardcopy functionality is mangled.

  * Pass modified pysparse to Roman and ask for improved functionality.

  * Pass ``PhysicalField`` back to `Konrad Hinsen`_.

  * Better ``__repr__`` for FiPy objects.

  * Create Grid1D as trivial decendant of Grid2D.

- Refactoring:

  * Use an array module rather than Numeric and switch to numarray.

  * Viewers:

    - Create base viewing class.
    - Use viewers in scipy that are similar to gist and remove gist (?).
    - Refactor PyX viewer.

  * Merge ``term`` and ``equation`` objects into one object:

    - Implicitly define solvers for terms-equations.
    - Boundary conditions should just be terms.
   
      * Include periodic boundary condition.
 
  * Use ``doctest`` exclusively.

  * Make the ``build_docs`` just update the files that have changed since
    the last build.
    
  * Major mesh refactor:

    - Remove separate ``nummesh`` and ``pymesh`` structure
    - Think about the ``mesh`` hierarchy as it stands:

      * Many branches at present.
      * Consolidate functionality (``__add__`` etc).
      * How does Gmsh fit in?

    - Lazy mesh array evaluations.

  * Reduce memory requirements

    - Identify memory usage.

  * Run time tests.

  * Memory tests.

Long term Goals
---------------

- Functionality:

  * Multigrid method.
  * Cell centered FVM.
  * Adaptive meshing.
  * Linear Algebra:

    - Petc.
    - SciPy.
	
  * Look into pyrex as an alternative to inlining.
  * Laminar Fluid Flow module.
  * DX viewer.

- Refactoring:

  * Global approach to phase field equations.

- Documentation:

  * Write a paper on FiPy.


.. _SourceForge CVS repository:       http://cvs.sourceforge.net/viewcvs.py/fipy/
.. _Steve:                            mailto:slanger@nist.gov
.. _Konrad Hinsen:                    mailto:hinsen@cnrs-orleans.fr
.. _Roman Geus:                       http://people.web.psi.ch/geus/

