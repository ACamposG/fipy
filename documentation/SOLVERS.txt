.. _SOLVERS:

=======
Solvers
=======

:term:`FiPy` requires either :term:`PySparse`, :term:`SciPy` or
:term:`Trilinos` to be installed in order to solve linear systems.
From our experiences, :term:`FiPy` runs most efficiently in serial
when :term:`PySparse` is the linear solver. :term:`Trilinos` is the
most complete of the three solvers due to its numerous preconditioning
and solver capabilities and it also allows :term:`FiPy` to run in
parallel. Although less efficient than :term:`PySparse` and less
capable than :term:`Trilinos`, :term:`SciPy` is a very popular
package, widely available and easy to install. For this reason,
:term:`SciPy` may be the best linear solver choice when first
installing and testing :term:`FiPy`.

.. _PYSPARSE:

--------
PySparse
--------

http://pysparse.sourceforge.net

You can `download the PySparse archive`_ or check it out via
`anonymous SVN download`_. From within the ``pysparse`` base
directory, follow its included instructions for building
:term:`PySparse` for your platform. `PySparse Windows installers`_ are
available.

.. _anonymous SVN download: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://sourceforge.net/scm/?type=svn&group_id=101403

.. note::

   Windows users who choose to build from source should pay particular
   attention to the instructions in the INSTALL file in the base
   :term:`PySparse` directory.

.. warning::

   If :term:`PySparse` is installed in a local directory a further
   path may have to be added to the :envvar:`PYTHONPATH` environment
   variable. For example, if::

       $ python setup.py install --home=/some/directory/some/where

   then both :file:`/some/directory/some/where` and
   :file:`/some/directory/some/where/lib/python` are required to be
   added to the :envvar:`PYTHONPATH`, e.g.::

       $ set PYTHONPATH=/some/directory/some/where:/some/directory/some/where/lbi/python

.. warning::

   :term:`FiPy` requires version 1.0 or higher of :term:`PySparse`.

.. _Roman Geus: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://people.web.psi.ch/geus/
.. _download the PySparse archive: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://sourceforge.net/project/showfiles.php?group_id=101403
.. _PySparse Windows installers: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://sourceforge.net/project/showfiles.php?group_id=101403

.. _SCIPY:

-----
SciPy
-----

http://www.scipy.org/

`SciPy download instructions`_ are available
<http://www.scipy.org/Download>. :term:`SciPy` provides a basic set of
Krylov solvers, but no preconditoners.

.. _SciPy download instructions:   http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.scipy.org/Download

.. _PYAMG:

-----
PyAmg
-----

http://code.google.com/p/pyamg/

The :term:`PyAmg` package provides preconditioners that can be used in
conjunction with the :term:`SciPy` solvers.

.. _TRILINOS:

--------
Trilinos
--------

http://trilinos.sandia.gov

:term:`Trilinos` provides a more complete set of solvers and
preconditioners than either :term:`PySparse` or
:term:`SciPy`. :term:`Trilinos` preconditioning allows for iterative
solutions to some difficult problems that :term:`PySparse` and
:term:`SciPy` cannot solve, and it enables parallel execution of
:term:`FiPy` (see :ref:`PARALLEL` for more details).

.. attention::

   :term:`FiPy` runs more efficiently when :term:`PySparse` is
   installed alongside :term:`Trilinos`.

.. attention:: 
    
   :term:`Trilinos` is a large software suite with its own set of
   prerequisites, and can be difficult to set up. It is not necessary
   for most problems, and is **not** recommended for a basic install
   of :term:`FiPy`.

:term:`Trilinos` is built using :command:`cmake` along with
:command:`make` and :command:`make install`. The best approach that
we have found is as follows::

    $ cd trilinos-X.Y/
    $ SOURCE_DIR=`pwd`
    $ mkdir BUILD_DIR    
    $ cd BUILD_DIR
    $ cmake \
    >   -D CMAKE_BUILD_TYPE:STRING=RELEASE \
    >   -D Trilinos_ENABLE_PyTrilinos:BOOL=ON \
    >   -D BUILD_SHARED_LIBS:BOOL=ON \
    >   -D Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES:BOOL=ON \
    >   -D TPL_ENABLE_MPI:BOOL=ON \
    >   -D Trilinos_ENABLE_TESTS:BOOL=ON \
    >   -D DART_TESTING_TIMEOUT:STRING=600 \
    >   ${SOURCE_DIR}
    $ make
    $ make install

Depending on your platform, other options may be helpful or necessary;
see the :term:`Trilinos` user guide available from
http://trilinos.sandia.gov/documentation.html, or
http://trilinos.sandia.gov/packages/pytrilinos/faq.html for more
in-depth documentation.

.. note:: 
 
    Trilinos can be installed in a non-standard location by adding the
    :samp:`-D CMAKE_INSTALL_PREFIX:PATH=${{INSTALL_DIR}}` and
    :samp:`-D PyTrilinos_INSTALL_PREFIX:PATH=${{INSTALL_DIR}}` flags
    to the configure step. If :term:`Trilinos` is installed in a
    non-standard location, the path to the :term:`PyTrilinos`
    site-packages directory should be added to the
    :envvar:`PYTHONPATH` environment variable; this should be of the
    form
    :file:`${{INSTALL_DIR}}/lib/${{PYTHON_VERSION}}/site-packages/`. Also,
    the path to the :term:`Trilinos` lib directory should be added to
    the :envvar:`LD_LIBRARY_PATH` (on Linux) or
    :envvar:`DYLD_LIBRARY_PATH` (on Mac OS X) environment variable;
    this should be of the form :file:`${{INSTALL_DIR}}/lib``.

.. _MPI4PY:

mpi4py
======

http://mpi4py.scipy.org/

For :ref:`PARALLEL`, :term:`FiPy` requires ``mpi4py``, in addition to
:term:`Trilinos`. This should be obtainable with::

    $ pip install mpi4py

assuming you have the standard MPI libraries on your system.

