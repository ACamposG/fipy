=============
SVN practices
=============

Refer to SVN.txt for the current tagging conventions.

--------
Branches
--------

.. attention::

   svnmerge_ is recommended for all but the most trivial of branches

Break off for radical refactoring::

    $ cd trunk    
    $ BRANCH=refactoring_etc
    $ FIPYROOT=svn+ssh://username@matforge.org/usr/local/svn-fipy-repos
    $ svn copy $FIPYROOT/trunk $FIPYROOT/branches/$BRANCH -m "creating branch for $BRANCH"
    $ cd ..
    $ svn co $FIPYROOT/branches/$BRANCH
    $ cd $BRANCH

If using svnmerge_ (*highly* recommended):

    $ svnmerge.py init

.. note::

   Edit the commit message in `svnmerge-commit-message.txt` to comply with 
   TracLink syntax. E.g., change::

       Initialized merge tracking via "svnmerge" with revisions "1-2771" from 
       svn+ssh://matforge.org/usr/local/svn-fipy-repos/trunk

   to::

       Initialized merge tracking via "svnmerge" with log:trunk@1:2771

    $ svn ci -F svnmerge-commit-message.txt
    $ rm svnmerge-commit-message.txt

Edit and add to branch::

    $ emacs ...
    $ svn ci -m "refactoring_stage_A"
    $ emacs ...
    $ svn ci -m "refactoring_stage_B"

Merging changes from trunk to the branch
----------------------------------------

.. attention:: Use svnmerge_

    $ svnmerge.py merge

Review the merge, fix any conflicts.

.. note::

   Edit the commit message in `svnmerge-commit-message.txt` to comply with 
   TracLink syntax, as above.

..

Commit the changes

    $ svn ci -F svnmerge-commit-message.txt
    $ rm svnmerge-commit-message.txt

.. note:: 

   If you're *not* using svnmerge_ for some reason:

   Find the initial (IRN) and latest (LRN) revision numbers from the last 
   merge from trunk::

       $ cd ../trunk
       $ svn update

   Set `$LRN` based on the updated revision of trunk

       $ LRN=...

       $ svn log $FIPYROOT/branches/$BRANCH --stop-on-copy
       
   Look for "`merged trunk changes r${IRN}:${LRN} to ${BRANCH}`" or 
   "`merged log:trunk@${IRN}:${LRN} to source:branches/${BRANCH}`" and set `IRN` 
   to `${LRN}` from log message, otherwise to the revision at which the branch 
   was created.

       $ IRN=...

   Merge updated state of trunk to the branch::

       $ cd ../$BRANCH
       $ svn merge -r${IRN}:${LRN} $FIPYROOT/trunk
       $ svn diff

   Resolve any conflicts

       $ python setup.py test
       $ svn ci -m "merged log:trunk@${IRN}:${LRN} to source:branches/${BRANCH}@${LRN}"
    
Refactoring complete: merge branch to the trunk
-----------------------------------------------

    $ cd trunk
    $ svn update

.. attention:: Use svnmerge_

.. attention::

   If you haven't previously done so, initialize merge tracking support

       $ svnmerge.py init ${FIPYROOT}/branches/${BRANCH}

   .. note::

      Edit the commit message in `svnmerge-commit-message.txt` to comply with 
      TracLink syntax, as above.

   Commit the changes

       $ svn ci -F svnmerge-commit-message.txt
       $ rm svnmerge-commit-message.txt

Merge the branch to the trunk

    $ svnmerge.py merge --bidirectional

.. note::

   Edit the commit message in `svnmerge-commit-message.txt` to comply with 
   TracLink syntax, as above.

Commit the changes

    $ svn ci -F svnmerge-commit-message.txt
    $ rm svnmerge-commit-message.txt

.. note:: 

   If you're *not* using svnmerge_ for some reason:

   First, follow the instructions for 
   `Merging changes from trunk to the branch`_.

   Record the `HEAD` revision number from the update::

       $ HRN=...

   Merge the branch `HEAD` to trunk::

       $ svn merge ${FIPYROOT}/trunk@${HRN} \
                   ${FIPYROOT}/branches/${BRANCH}@${HRN}
       $ svn diff

   Resolve any conflicts

       $ python setup.py test
       $ svn ci -m "merged source:branches/${BRANCH}@${HRN} to source:trunk@${HRN}"


When completely done with the branch

    $ svnmerge.py uninit
    $ svn delete -m "Refactoring complete. Merged source:branches/${BRANCH} to source:trunk" \
        ${FIPYROOT}/branches/${BRANCH}
    
--------
Versions
--------

At point of version release x.y, *on main trunk*::

    $ svn copy $FIPYROOT/trunk $FIPYROOT/tags/version-x_y -m "tagging version x.y"
    $ svn delete $FIPYROOT/tags/STABLE -m "moving STABLE to new version"
    $ svn copy $FIPYROOT/tags/version-x_y $FIPYROOT/tags/STABLE -m "version x.y is STABLE"
    $ svn delete $FIPYROOT/tags/CURRENT -m "moving CURRENT to new version"
    $ svn copy $FIPYROOT/tags/version-x_y $FIPYROOT/tags/CURRENT -m "version x.y is CURRENT"	

---------
Bug fixes
---------

At the point some fix is made to an old version n.m::

    $ BRANCH=branch-version-n_m
    $ svn copy $FIPYROOT/tags/version-n_m  $FIPYROOT/branches/$BRANCH -m "making branch for version n.m"
    $ svn co $FIPYROOT/branches/$BRANCH

Fix the code::

    $ cd $BRANCH
    $ svn ci -m "fix n.m.q"
    $ svn copy $FIPYROOT/branches/$BRANCH $FIPYROOT/tags/version-n_m_q

Possibly::

    $ svn delete $FIPYROOT/tags/CURRENT -m "moving CURRENT to new version"
    $ svn delete $FIPYROOT/tags/STABLE -m "moving STABLE to new version"
    $ svn copy $FIPYROOT/tags/version-n_m_q $FIPYROOT/tags/CURRENT -m "version n.m.q is CURRENT"
    $ svn copy $FIPYROOT/tags/version-n_m_q $FIPYROOT/tags/STABLE -m "version n.m.q is STABLE"

Find the initial revision number for the branch (IRN) and the latest revision number (LRN)::

    $ svn log $FIPYROOT/branches/$BRANCH --stop-on-copy
    $ IRN=..
    $ LRN=...

Now merge n.m.q changes back to main trunk::

    $ cd ../trunk
    $ svn diff -r${IRN}:${LRN} $FIPYROOT/branches/$BRANCH
    $ svn merge -r${IRN}:${LRN} $FIPYROOT/branches/$BRANCH
    $ svn ci -m "merged version n.m.q"    

Make new fix q+1 to n.m::

    $ cd ../$BRANCH 
    
Fix the code::

    $ svn ci -m "fix version n.m.q+1"

Find the previous revision number for the branch (PRN) and the latest revision number (LRN)::

    $ svn log $FIPYROOT/branches/$BRANCH --stop-on-copy
    $ PRN=..
    $ LRN=...

Again, merge n.m.q+1 changes back to main trunk::

    $ cd ../trunk
    $ svn diff -r${PRN}:{LRN} $FIPYROOT/branches/$BRANCH
    $ svn merge -r${PRN}:{LRN} $FIPYROOT/branches/$BRANCH
    $ svn ci -m "merged version n.m.q+1"

================
Making a Release
================

Change the version number in fipy/__init__.py

Check items in TODOLIST.txt

Check out a clean copy of the desired release::

    $ svn co $FIPYROOT/trunk CLEAN
    $ cd CLEAN

Run the test suite!:

    $ python setup.py test --no-cache
    $ python setup.py test --inline --no-cache
    $ python setup.py test --cache
    $ python setup.py test --inline --cache

.. attention:: If tests don't pass, make sure the release notes reflect 
   that fact!

Build the documentation and the web pages::

    $ python setup.py build_docs --manual --latex --webpage

Build the compressed distribution::

    $ rm MANIFEST
    $ python setup.py sdist

Build a windows executable installer::

    $ rm MANIFEST
    $ python setup.py bdist --formats=wininst

Combine the windows installer and examples into one tar ball.

    $ rm MANIFEST
    $ set FIPY_VERSION=XXX
    $ ln -s dist/FiPy-${FIPY_VERSION}.win32.exe .
    $ python setup.py sdist --template=MANIFEST-WINDOWS.in --dist-dir=dist-windows --no-defaults --formats=zip
    $ unlink FiPy-${FIPY_VERSION}.win32.exe
    $ mv dist-windows/FiPy-${FIPY_VERSION}.zip dist/FiPy-${FIPY_VERSION}.win32.zip

Tag the repository as appropriate (see `SVN practices`_ above).

Upload to the CTCMS website::

    $ python setup.py build_docs --upload

.. warning:: Some versions of ``rsync`` on Mac OS X have caused problems
   when they try to upload erroneous ``\rsrc`` directories. Version 2.6.2
   does not have this problem.

`Upload the release to SourceForge`_ and to the `MatForge download page`_.  You can use, e.g.,::

    $ svn log --revision HEAD:${LASTREV}

to build the ChangeLog. You can determine the revision number LASTREV by examining the "Last Changed 
Rev:" field given by::

    $ svn info http://matforge.org/svn/fipy/tags/version-x_y

Make an announcement to `fipy@nist.gov`_


.. Upload the release to SourceForge: https://sourceforge.net/project/admin/qrs.php?package_id=&group_id=118428
.. MatForge download page: http://matforge.org/fipy/wiki/FiPyFiles
.. fipy@nist.gov: mailto:fipy@nist.gov

==========================================
Making a Windows Distribution for Pysparse
==========================================

Make sure of the following:

   - mingw is installed
   - libpython.a is in c:\pythonXX\libs
   - libblas.a is in c:\mingw\lib
   - liblapack.a is in c:\mingw\lib
   - Numeric is installed

If the above is not satisfied implement the Pysparse INSTALL instructions.

Set the PATH to use MINGW's tools.

   set PATH=C:\mingw\bin

Build the distribution.

   C:\pythonXX\python setup.py build --compiler=mingw32 bdist --format=wininst

.. include:: utils/include.txt

.. |FiPy| replace:: |htmlFiPy| |latexFiPy|

===============================
Converting a CVS Project to SVN
===============================

Obtain cvs2svn_

.. _cvs2svn: http://cvs2svn.tigris.org/

.. note::

   `cvs2svn-1.3.0/www/faq.html` covers this, but if you follow its directions 
   exactly, you will get the rather ridiculous::

       REPOSITORY
          |
          |---> ${PROJECT}
          |         |
          |         |---> trunk
          |         |        |
          |         |        |---> ${PROJECT}
          |         |
          |         |---> branches
          |         |        |
          |         |        |---> BRANCH1
          |         |        |       |
          |         |        |       |---> ${PROJECT}
          |         |        |
          |         |        |---> BRANCH2
          |         |                |
          |         |                |---> ${PROJECT}
          |         |
          |         |---> tags
          |                  |
          |                  |---> TAG1
          |                  |       |
          |                  |       |---> ${PROJECT}
          |                  |
          |                  |---> TAG2
          |                          |
          |                          |---> ${PROJECT}
          |
          |---> SOME_OTHER_PROJECT1
          |
          |---> SOME_OTHER_PROJECT2

   instead of the more desirable::

       REPOSITORY
          |
          |---> ${PROJECT}
          |         |
          |         |---> trunk
          |         |
          |         |---> branches
          |         |        |
          |         |        |---> BRANCH1
          |         |        |
          |         |        |---> BRANCH2
          |         |
          |         |---> tags
          |                  |
          |                  |---> TAG1
          |                  |
          |                  |---> TAG2
          |
          |---> SOME_OTHER_PROJECT1
          |
          |---> SOME_OTHER_PROJECT2


Make a copy of the portion of the CVS repository governing the project in 
question

    $ PROJECT=MyProjectInCVS
    $ mkdir cvs2svnSandbox
    $ cd cvs2svnSandbox
    $ cp -r /path/to/cvs/repository/${PROJECT} ${PROJECT}

Convert the CVS project repository copy into an SVN repository dump file

    $ mkdir ${PROJECT}/CVSROOT
    $ cvs2svn --dump-only ${PROJECT}

You should now have a file `cvs2svn-dump` in your working directory.

If necessary, create an SVN repository

    $ svnadmin create --fs-type fsfs /path/to/svn/repos

.. note:: An FSFS repository has fewer permissions problems than a Berkeley-DB 
   repository.

Make sure that the new repository has appropriate group permissions (this is
still a bit fuzzy for me)

    $ chgrp -R $GROUP /path/to/svn/repos
    $ chmod -R g+w /path/to/svn/repos

Add a stub for the new project

    $ svn mkdir file:///path/to/svn/repos/${PROJECT} -m "added ${PROJECT} directory"

Import the converted project repository into SVN

    $ svnadmin --parent-dir $PROJECT load /path/to/svn/repos < cvs2svn-dump

You can now test a checkout

    $ svn checkout svn+ssh://MACHINE.IP.ADDR/path/to/svn/repos/${PROJECT}/trunk SVNTEST

At this point, you can get rid of all of the conversion materials

    $ cd ..
    $ rm -rf cvs2svnSandbox


.. _svnmerge: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.orcaware.com/svn/wiki/Svnmerge.py
