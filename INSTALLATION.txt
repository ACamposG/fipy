.. _INSTALLATION:

============
Installation
============

The :term:`FiPy` finite volume PDE solver relies on several
third-party packages.  It is *best to obtain and install those first*
before attempting to install :term:`FiPy`. This document explains how
to install :term:`FiPy` not how to use it. See the :ref:`USAGE`
document for details on how to use :term:`FiPy` along with its various
required packages.

.. note::
   
   It may be useful to set up a :ref:`ENVIRONMENT` before beginning
   the installation process.

.. only:: html

   .. note::

      By selecting the links on this page, you will be leaving NIST
      webspace. We have provided these links to other web sites because
      they may have information that would be of interest to you. No
      inferences should be drawn on account of other sites being
      referenced, or not, from this page. There may be other web sites that
      are more appropriate for your purpose. NIST does not necessarily
      endorse the views expressed, or concur with the facts presented on
      these sites. Further, NIST does not endorse any commercial products
      that may be mentioned on these sites. Please address comments about
      this page to fipy@nist.gov.

--------------------------
Installing Python Packages
--------------------------

In general, it is best to use the following order of precedence when
installing packages:

 * Use the system package manager if possible.
 * Use PyPI_ (the Python_ package index)::

     $ pip install package
 * Download manually, unpack and run::

     $ python setup.py install

Further information about each ``setup.py`` script is available by typing::

     $ python setup.py --help

For more information on custom installs and development with :term:`FiPy`,
read the :ref:`ENVIRONMENT` section of the :ref:`USAGE` document
before beginning the installation process.

.. _PyPI:

PyPI
----

http://pypi.python.org/pypi

`PyPI`_ is a package manager for Python_ packages. To use PyPI_, the
`Setuptools` package needs to be installed. Once this is available,
PyPI_ can be installed with::

     $ easy_install pip

.. warning::

   PyPI_ takes care of a packages Python_ dependencies. It does not deal
   with non-Python_ dependencies.

.. _Setuptools: http://pypi.python.org/pypi/setuptools

--------------
Obtaining FiPy
--------------

:term:`FiPy` is freely available for download via Subversion_ or as a
compressed archive from
<http://www.ctcms.nist.gov/fipy/download>. Please see
:ref:`documentation:SVN` for instructions for obtaining :term:`FiPy`
with Subversion_.

.. warning::

   Keep in mind that if you choose to download the `compressed
   archive`_ you will then need to preserve your changes when upgrades
   to :term:`FiPy` become available (upgrades via Subversion_ will handle
   this issue automatically).

.. _compressed archive:      http://www.ctcms.nist.gov/fipy/download/

---------------
Installing FiPy
---------------

Details of the `Required Packages`_ and links are given below and in
`platform-specific instructions`_, but for the courageous and the
impatient, :term:`FiPy` can be up and running quickly by simply
installing the following prerequisite packages on your system:

 * Python_

 * NumPy_ 
 
 * Either SciPy_ or PySparse_ (see the :ref:`SOLVERS` discussion)

 * Matplotlib_ (not strictly necessary just to run the tests)

Other packages add greatly to :term:`FiPy`'s capabilities, but are not
necessary for an initial installation or to simply run the test suite.

It is not necessary to formally install :term:`FiPy`, but if you wish
to do so and you are confident that all of the requisite packages have
been installed properly, you can install it by typing::

    $ pip install fipy

or by unpacking the archive and typing::
  
    $ python setup.py install

at the command line in the base :term:`FiPy` directory.
Alternatively, you may choose not to formally install :term:`FiPy` and
to simply work within the base directory instead. In this case or if
you are making a non-standard install (without admin privileges), read
the :ref:`ENVIRONMENT` section of the :ref:`USAGE` document before
beginning the installation process.

.. _REQUIREDPACKAGES:

-----------------
Required Packages
-----------------

.. warning::

   :term:`FiPy` will not run if the following items are not installed

Python
======

http://www.python.org/

:term:`FiPy` is written in the :term:`Python` language and requires a Python_
installation to run.  :term:`Python` comes pre-installed on many operating
systems, which you can check by opening a terminal and typing
``python``, *e.g.*::

    $ python
    Python 2.3 (#1, Sep 13 2003, 00:49:11) 
    ...
    Type "help", "copyright", "credits" or "license" for more information.
    >>> 

If necessary, you can download_ and install it for your platform 
<http://www.python.org/download>.

.. note::

   :term:`FiPy` requires at least version 2.5 of Python_. See `Running under Python 3` for 
   instructions on how to run  :term:`FiPy` with python 3.

.. _Python 3.0:   http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.python.org/download/releases/3.0/
.. _download: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.python.org/download/

Python_ along with many of :term:`FiPy`'s required and optional
packages is available with one of the following Python_ distributions.

Enthought Python Distribution
-----------------------------

http://www.enthought.com/epd

This installer provides a very large number of useful scientific packages
for Python, including Python_, NumPy_, SciPy_, Matplotlib_, and IPython_.
Installers are available for Windows_, `Mac OS X`_ and `RedHat Linux`_.

.. attention::

   :term:`PySparse` and :term:`FiPy` are not presently included in EPD, so you will need
   to separately install them manually.

Python(x,y)
-----------

http://www.pythonxy.com/

Another comprehensive Python package installer for scientific applications,
presently only available for Windows_. See :ref:`WINDOWS-INSTALLATION` for
more information.

NumPy
=====

http://numpy.scipy.org

Obtain and install the :term:`NumPy` package. :term:`FiPy` requires at least
version 1.0 of NumPy_.

PySparse
========

http://pysparse.sourceforge.net

:term:`FiPy` requires `Roman Geus`_' :term:`PySparse` package.

You can `download the PySparse archive`_ or check it out via anonymous SVN
download. From within the ``pysparse`` base directory, follow its included
instructions for building :term:`PySparse` for your platform. `PySparse Windows
installers`_ are available.

.. note::

   Windows users who choose to build from source should pay particular
   attention to the instructions in the INSTALL file in the base
   :term:`PySparse` directory.

.. warning::

   If pysparse is installed in a local directory a further path may
   have to be added to the :envvar:`PYTHONPATH` environment variable. For
   example, if::

       $ python setup.py install --home=/some/directory/some/where

   then both :file:`/some/directory/some/where` and
   :file:`/some/directory/some/where/lib/python` are required to be added
   to the :envvar:`PYTHONPATH`, e.g.::

       $ set PYTHONPATH=/some/directory/some/where:/some/directory/some/where/lib/python

.. warning::

   :term:`FiPy` requires version 1.0 or higher of :term:`PySparse`.

.. attention::

   This package is not a requirement if SciPy_ is installed.

.. _Roman Geus: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://people.web.psi.ch/geus/
.. _download the PySparse archive: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://sourceforge.net/project/showfiles.php?group_id=101403
.. _PySparse Windows installers: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://sourceforge.net/project/showfiles.php?group_id=101403

SciPy
=====

http://www.scipy.org/

`SciPy download instructions`_ are available
<http://www.scipy.org/Download>. We recommend version 0.5.2 or
greater.

.. note:: 

   A handful of test cases use functions from the SciPy_ library and will
   throw errors if it is missing.

.. attention::

   This package is not a requirement if PySparse_ is installed.

.. _SciPy download instructions:   http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.scipy.org/Download

Matplotlib
==========

http://matplotlib.sourceforge.net

:term:`Matplotlib` is a Python_ package that displays publication quality
results. It displays both 1D X-Y type plots and 2D contour plots for
structured data. It does not display unstructured 2D data or 3D data.
It works on all common platforms and produces publication quality hard
copies. Version 0.72.1 or higher is required. `Matplotlib installers
for specific platforms`_ are available 
<http://sourceforge.net/project/showfiles.php?group_id=80706&package_id=82474>.

.. note::

   :term:`Matplotlib` is noticeably slower than :term:`Pygist` or Gnuplot.py_, but
   has superior image rendering and plotting functionality.

.. _Matplotlib installers for specific platforms: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://sourceforge.net/project/showfiles.php?group_id=80706&package_id=82474

.. _OPTIONALPACKAGES:

-----------------
Optional Packages
-----------------

.. note::

   The following packages are not required to run :term:`FiPy`, but they can be helpful.

Mayavi
======

http://code.enthought.com/projects/mayavi/

The `Mayavi 2`_ Data Visualizer is a free, easy to use scientific data
visualizer.  It displays 1D, 2D and 3D data. It is the only :term:`FiPy`
viewer available for 3D data. Other viewers are probably better for 1D
or 2D viewing. 

.. note::
   
   `Mayavi 2`_ is packaged for Ubuntu and Debian linux. Using the packaged versions makes installation much easier.

.. note::

   MayaVi 1 is no longer supported.

.. _Mayavi 2: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://code.enthought.com/projects/mayavi


PyAmg
=====

http://code.google.com/p/pyamg/

The :term:`PyAmg` preconditioners can be used when :term:`SciPy` is
installed.

Gmsh
====

http://www.geuz.org/gmsh/

:term:`Gmsh` allows the creation of irregular meshes.


.. _PYTRILINOS:

PyTrilinos
==========

http://trilinos.sandia.gov

:term:`Trilinos` provides solvers and preconditioners, and can be used instead of
:term:`PySparse`. :term:`Trilinos` preconditioning allows for iterative solutions to some
difficult problems that :term:`PySparse` cannot solve, and it enables
solving on parallel nodes.

.. attention::

   In order to solve in parallel, both :term:`PySparse` and 
   :term:`Trilinos` are required.

.. attention:: 
    
   :term:`Trilinos` is a large software suite with its own set of prerequisites, and
    can be difficult to set up. It is not necessary for most problems, and is
    **not** recommended in a basic install of :term:`FiPy`.

:term:`Trilinos` is built using :command:`cmake` along with
:command:`make` and :command:`make install`. The best approach that
we have found is as follows::

    $ cd trilinos-X.Y/
    $ SOURCE_DIR=`pwd`
    $ mkdir BUILD_DIR    
    $ cd BUILD_DIR
    $ cmake \
    >   -D CMAKE_BUILD_TYPE:STRING=RELEASE \
    >   -D Trilinos_ENABLE_PyTrilinos:BOOL=ON \
    >   -D BUILD_SHARED_LIBS:BOOL=ON \
    >   -D Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES:BOOL=ON \
    >   -D TPL_ENABLE_MPI:BOOL=ON \
    >   -D Trilinos_ENABLE_TESTS:BOOL=ON \
    >   -D DART_TESTING_TIMEOUT:STRING=600 \
    >   ${SOURCE_DIR}
    $ make
    $ make install

Depending on your platform, other options may be helpful or necessary;
see the :term:`Trilinos` user guide available from
http://trilinos.sandia.gov/documentation.html, or
http://trilinos.sandia.gov/packages/pytrilinos/faq.html for more
in-depth documentation.

.. note:: 
 
    Trilinos can be installed in a non-standard location by adding the
    :samp:`-D CMAKE_INSTALL_PREFIX:PATH=${{INSTALL_DIR}}` and
    :samp:`-D PyTrilinos_INSTALL_PREFIX:PATH=${{INSTALL_DIR}}` flags
    to the configure step. If :term:`Trilinos` is installed in a
    nonstandard location, the path to the :term:`PyTrilinos`
    site-packages directory should be added to the
    :envvar:`PYTHONPATH` environment variable; this should be of the
    form
    :file:`${{INSTALL_DIR}}/lib/${{PYTHON_VERSION}}/site-packages/`. Also,
    the path to the :term:`Trilinos` lib directory should be added to
    the :envvar:`LD_LIBRARY_PATH` (on Linux) or
    :envvar:`DYLD_LIBRARY_PATH` (on Mac OS X) environment variable;
    this should be of the form :file:`${{INSTALL_DIR}}/lib``.

.. _MPI4PY:

mpi4py
======

http://mpi4py.scipy.org/

For :ref:`PARALLEL`, :term:`FiPy` needs ``mpi4py``, in addition 
to both :term:`Trilinos` and :term:`PySparse`. This should be obtainable 
with::

    $ pip install mpi4py

assuming you have the standard MPI libraries on your system.

----------------
Defunct Packages
----------------

These packages receive little or no support, but are still compatible
with :term:`FiPy`.

Pygist
======

http://hifweb.lbl.gov/public/software/gist/

The :term:`Pygist` package can be used to display simulation results. It
displays both 1D X-Y type plots and 2D contour plots for both
structured and unstructured data. It does not display 3D
data. Although stated as working on Windows, it does not seem to do a
good job of rendering on this platform. :term:`Pygist` works fine on other
common platforms. :term:`Pygist` no longer seems to be under development, but
is still recommended as a fast light weight alternative to
:term:`Matplotlib`.

.. attention::

   :term:`Pygist` requires the old Numeric module to be installed.

.. warning:: 

   The facility to produce hard copies in :term:`Pygist` does not work very well and
   may crash the :term:`FiPy` run. "``.eps``" and "``.cgm``" export seem to work.

.. note::

   If you experience difficulty building the native :term:`Pygist` viewer on
   `Mac OS X`_, you may wish to build the package with the :option:`--x11`
   option described in its documentation.

.. note::

   :term:`Pygist` can have problems finding color pallets, such as "``heat.gp``" and 
   "``work.gs``", when installed locally. You may need to set the 
   :envvar:`GISTPATH` environment variable to point to the directory containing 
   these files (you may find it as "``g/``" within the directory you 
   specified for :option:`--home`). 

.. _Pygist: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://hifweb.lbl.gov/public/software/gist/


Gnuplot-py
==========

http://gnuplot-py.sourceforge.net

Gnuplot.py_ is a Python_ package that interfaces to :term:`gnuplot`, the
popular open-source plotting program. It displays both 1D X-Y type
plots and 2D contour plots for structured data but not for
unstructured data or 3D data. It works on all common platforms and
produces hard copies, however, it sometimes breaks on Windows. As a
general remark, the viewing quality using either :term:`Pygist` or
:term:`Matplotlib` is preferable.

.. _Gnuplot.py:       http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://gnuplot-py.sourceforge.net

------------------------------
Platform-Specific Instructions
------------------------------

.. toctree::
   :maxdepth: 2

   MACOSX-INSTALLATION
   WINDOWS-INSTALLATION
   UBUNTU-DEBIAN-INSTALLATION
   documentation/SVN

.. _Python tutorial: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://docs.python.org/tut/tut.html
.. _Dive Into Python: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://diveintopython.org
.. _Subversion:       http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://matforge.org/fipy/browser
.. _online Subversion Red Bean book: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://svnbook.red-bean.com

