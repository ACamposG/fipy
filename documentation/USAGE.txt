.. _USAGE:

==========
Using FiPy
==========

This document explains how to use :term:`FiPy` in a practical sense.
To see the problems that :term:`FiPy` is capable of solving, you can
run any of the scripts in :mod:`examples`.

.. note::

   We strongly recommend you proceed through :mod:`examples`, but at
   the very least work through :mod:`examples.diffusion.mesh1D` to
   understand the notation and basic concepts of :term:`FiPy`.

We exclusively use either the unix command line or IPython_ to interact
with :term:`FiPy`. The commands in :mod:`examples` are written with
the assumption that they will be executed from the command line. For
instance, from within the main :term:`FiPy` directory, you can type::

    $ python examples/diffusion/mesh1D.py

A viewer should appear and you should be prompted through a series of
examples.

.. note::

   From within IPython_, you would type::

       >>> run examples/diffusion/mesh1D.py

In order to customize the examples, or to develop your own scripts, some
knowledge of Python syntax is required.  We recommend you familiarize
yourself with the excellent `Python tutorial`_ [PythonTutorial]_ 
or with `Dive Into Python`_ [DiveIntoPython]_.

As you gain experience, you will want to see
:ref:`FAQ-FlagsAndEnvironmentVariables` to learn about flags and 
environment variable that affect :term:`FiPy`.

.. _ENVIRONMENT:

-----------------------
Development Environment
-----------------------

It is often preferable to not formally install packages in the system
directories. The reasons for this include:

 * developing or altering the package source code,

 * trying out a new package along with its dependencies without
   violating a working system,

 * or dealing with conflicting packages and dependencies.

The simplest way to use a :term:`Python` package without installing is
to work in the base directory of the unpacked package and set the
``PYTHONPATH`` environment variable to "``.``". In order to work in an
alternate directory ``PYTHONPATH`` must be set to
"``~/path/to/package``". This method of working is adequate for one
package, but quickly becomes unmanageable with multiple packages.  An
alternate to setting ``PYTHONPATH`` is to employ one of the utilities
that manage packages and their dependencies independently of the
system package manager and the system directories. These utilities
include Stow_, Virtualenv_ and zc.buildout_ amongst others. Here we'll
describe the use of Virtualenv.

.. _Stow: http://savannah.gnu.org/projects/stow/
.. _zc.buildout: http://pypi.python.org/pypi/zc.buildout

Virtualenv
----------

http://pypi.python.org/pypi/virtualenv

Virtualenv_ enables the installation of packages in multiple isolated
environments. It organizes the installation of :term:`Python` packages
especially well and also provides a handy location for installing none
non-:term:`Python` packages. The best way to set up a ``fipy`` working
environment is to follow the commands listed below or some
variation. The commands were tested on a `Debian Linux`_ "squeeze"
platform, but should be similar for other platforms.  Note that Admin
privileges are required initially to install Virtualenv_::

    $ sudo pip install virtualenv
    $ sudo pip install virtualenvwrapper
    $ source /usr/local/bin/virtualenvwrapper.sh
    $ mkvirtualenv fipy
    $ workon fipy
    $ pip install numpy
    $ pip install pysparse

and establish a :term:`FiPy` working environment with::

    $ pip install fipy

or establish a :term:`FiPy` development environment with::

    $ wget http://www.ctcms.nist.gov/fipy/download/FiPy-​version-​tar.​gz
    $ tar zxvf FiPy-​version-​tar.​gz
    $ cd FiPy-version
    $ python setup.py develop
    $ cd ..

and test with::

    $ python -c "import fipy; fipy.test()"

The :term:`FiPy` development environment allows the source code to be
altered in place and used without issuing further setuptools commands.

-----
Stuff
-----

 :term:`FiPy` will select the first viewer that is available
from the list below.  If more than one is installed, specify a viewer
by setting the :envvar:`FIPY_VIEWER` environment variable to either
"``gist``", "``gnuplot``" or "``matplotlib``".

:term:`SciPy` can also be used in place of :term:`PySparse` or
:ref:`PYTRILINOS` as the linear solver suite. Set the
:envvar:`FIPY_SOLVERS` environment variable to ``scipy`` or use the
``--scipy`` command line flag. Furthermore, :term:`PyAmg` can be used
for preconditioning when the :term:`Scipy` solvers are employed. In
this case, set :envvar:`FIPY_SOLVERS` to ``pyamg`` or use the
``--pyamg`` flag in place of ``--scipy``. The use of :ref:`PySparse`
is still recommended as the primary solver suite for performance
reasons.


.. _SOLVERS:

--------------
Linear Solvers
--------------

----------
Efficiency
----------

Significantly improved performance has been achieved with the judicious use
of C language inlining, via the :mod:`scipy.weave`. 

------------
Testing FiPy
------------

After installation, you can test :term:`FiPy` by executing::

    $ python -c "import fipy; fipy.test()"

From the base directory, you can verify that :term:`FiPy` works properly by
executing::

    $ python setup.py test

Depending on the packages you chose to install in :ref:`OPTIONALPACKAGES`
be sure to set the appropriate environment variables.  You can expect a few
errors if you did not install all of the recommended packages.

.. note::

   In order for :term:`Python` to find the :term:`FiPy` modules, you will need to ensure
   that the base directory is added to your :envvar:`PYTHONPATH` environment
   variable, *e.g.*::

       $ setenv PYTHONPATH .:${PYTHONPATH}

   or::

       $ export PYTHONPATH=.:${PYTHONPATH}

If you chose to install the :mod:`scipy.weave` package, you should rerun the
tests with::

    $ python setup.py test --inline

A few tests will fail the first time as a result of the messages
output in the course of caching the compiled inline code, but a repeat
test should have no failures (although see "``repairing catalog by
removing key``" in the :ref:`FAQ`).

If :term:`FiPy` is configured for :ref:`PARALLEL`, you can run the tests 
on multiple processor cores with::

    $ mpirun -np {# of processors} python setup.py test

.. note::
   
   When running in parallel, there are two expected test failures in
   :mod:`examples.elphf.diffusion.mesh1D` and in
   :mod:`examples.diffusion.nthOrder.input4thOrder-line`. These failures are problems
   with those particular tests, not with the parallel mechanism itself.

.. _PARALLEL:

IPython
=======

http://ipython.scipy.org/

This interactive Python shell is nicer to use than the default, and 
integrates nicely with matplotlib_. Depending on platform, you may be able 
to download a binary or build from source.


-------------------
Solving in Parallel
-------------------

:term:`FiPy` can use :term:`Trilinos` to solve equations in parallel, as 
long as they are defined on a "``Grid``" mesh 
(:class:`~fipy.meshes.numMesh.grid1D.Grid1D`, 
:class:`~fipy.meshes.numMesh.cylindricalGrid1D.CylindricalGrid1D`,
:class:`~fipy.meshes.numMesh.grid2D.Grid2D`,
:class:`~fipy.meshes.numMesh.cylindricalGrid2D.CylindricalGrid2D`, or
:class:`~fipy.meshes.numMesh.grid3D.Grid3D`). 

.. attention::

   :term:`Trilinos` *must* be compiled with MPI support.

.. attention::

   :term:`FiPy` requires `mpi4py <http://mpi4py.scipy.org/>`_ to work in parallel::

       $ easy_install mpi4py

.. note::

   A design wart presently *also* requires that :term:`PySparse` be
   installed. We hope to alleviate this requirement in a future release.

* It should not generally be necessary to change anything in your script.
  Simply invoke::

     $ mpirun -np {# of processors} python myScript.py

  instead of::

     $ python myScript.py

* To confirm that :term:`FiPy` and :term:`Trilinos` are properly 
  configured to solve in parallel, you can execute

  .. code-block:: python

     from fipy import parallel, Grid1D
     mesh = Grid1D(nx=10)
     print "%d cells on processor %d of %d" \
       % (mesh.getNumberOfCells(), parallel.procID, parallel.Nproc)

  (available as :file:`examples/parallel.py`) to check that :term:`FiPy` is
  distributing a mesh across processes as expected. E.g.::

     $ mpirun -np 3 python examples/parallel.py

  should print out::

     mpi4py: processor 0 of 3 :: PyTrilinos: processor 0 of 3 :: FiPy: 5 cells on processor 0 of 3
     mpi4py: processor 1 of 3 :: PyTrilinos: processor 1 of 3 :: FiPy: 7 cells on processor 1 of 3
     mpi4py: processor 2 of 3 :: PyTrilinos: processor 2 of 3 :: FiPy: 6 cells on processor 2 of 3

A complete list of the changes to FiPy's examples needed for parallel 
can be found at

  http://www.matforge.org/fipy/wiki/upgrade2_0examplesTo2_1

Most of the changes were required to ensure that :term:`FiPy` provides the
same literal output for both single and multiple processor solutions and
are not relevant to most "real" scripts. The two changes you *might* wish
to make to your own scripts are:

 * It is now preferable to use the 
   :class:`~fipy.solvers.DefaultAssymetricSolver` instead of the 
   :class:`~fipy.solvers.linearLUSolver.LinearLUSolver`. 

 * When solving in parallel, :term:`FiPy` essentially breaks the problem up 
   into separate sub-domains and solves them (somewhat) independently. 
   :term:`FiPy` generally "does the right thing", but if you find that you 
   need to do something with the entire solution, you can call
   ``var.``:meth:`~fipy.variables.cellVariable.CellVariable.getGlobalValue`.

:term:`Trilinos` solvers can be used to replace :term:`PySparse`
solvers. If both :term:`PySparse` and :term:`Trilinos` are present,
usage can be controlled by setting the :envvar:`FIPY_SOLVERS`
environment variable to ``Trilinos`` or ``Pysparse``, or by passing a
``--trilinos`` or ``--pysparse`` flag to the :term:`FiPy` script,
overriding the environment. In the absence of these indicators,
:term:`FiPy` will default to using :term:`PySparse` if it is
present. Using the ``--trilinos`` flag instructs :term:`FiPy` to
construct matrices using :term:`PySparse`, but solve them using
:term:`Trilinos`. To avoid the :term:`PySparse` requirement, use the
``--no-pysparse`` flag in place of the ``--trilinos`` flag. This will
both construct matrices and solve them with
:term:`Trilinos`. Unfortunately, :term:`Trilinos` tends to under
perform when compared to :term:`PySparse` during matrix construction.

.. note:: 

    :term:`Trilinos` solvers frequently give intermediate output that :term:`FiPy` cannot
    suppress. The most commonly encountered messages are:

     ``Gen_Prolongator warning : Max eigen <= 0.0``:
        which is not significant to :term:`FiPy`.

     ``Aztec status AZ_loss: loss of precision``:
        which indicates that there was some difficulty in solving the
        problem to the requested tolerance due to precision limitations,
        but usually does not prevent the solver from finding an adequate
        solution.

     ``Aztec status AZ_ill_cond: GMRES hessenberg ill-conditioned``:
        which indicates that GMRES is having trouble with the problem, and
        may indicate that trying a different solver or preconditioner may
        give more accurate results if GMRES fails.

     ``Aztec status AZ_breakdown: numerical breakdown``
        which usually indicates serious problems solving the equation which
        forced the solver to stop before reaching an adequate solution.
        Different solvers, different preconditioners, or a less restrictive
        tolerance may help.

Setting :envvar:`FIPY_SOLVERS` to ``pyamg`` or using the
``--pyamg`` flag will automatically use the default :term:`PyAmg`
preconditioners along with the default :term:`SciPy` solvers.



.. _sec:UsingFiPy:

.. _RunningUnderPython3:

----------------------
Running under Python 3     
----------------------

It is possible to run :term:`FiPy` scripts under Python 3, but you must 
convert FiPy's code before you can do so. From within the main 
:term:`FiPy` directory::

    $ 2to3 --write .
    $ 2to3 --write --doctests_only .

You can expect some harmless warnings and non-terminal errors from this conversion.

The minimal prerequisites are:

 * NumPy version 1.5 or greater
 * SciPy version 0.9 or greater
 * Matplotlib version 1.2 or greater (this hasn't been released yet, and 
   we haven't been able to successfully test the 
   :mod:`~.fipy.viewers.matplotlibViewer` classes with their development 
   code.

There are three known failures in FiPy's test suite under Python 3.

 * `RuntimeError: Factor is exactly singular` in fipy/terms/unaryTerm.py. 
   This is a SciPy solver failure not limited to Py3k.
 * :class:`~fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer` and 
   :class:`~fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer` due to lack of 
   `enthought.tvtk.api` in Py3k.

Manual
======

You can view the manual online at <http://www.ctcms.nist.gov/fipy> or you 
can `download the latest manual`_ from 
<http://matforge.org/fipy/wiki/FiPyManual>. Alternatively,
it may be possible to build a fresh copy by issuing the following
command in the base directory::

    $ python setup.py build_docs --pdf --html

.. note::

   This mechanism is intended primarily for the developers. At a minimum, 
   you will need a development version of `Sphinx 1.0
   <http://sphinx.pocoo.org/latest>`_, plus all of its prerequisites.

.. _download the latest manual:  http://matforge.org/fipy/wiki/FiPyManual

----------
Privileges
----------

If you do not have administrative privileges on your computer, or if for
any reason you don't want to tamper with your existing :term:`Python`
installation, most packages (including :term:`FiPy`) will allow you to install to
an alternate location.  Instead of installing these packages with
``python setup.py install``,
you would use
:samp:`python setup.py install --home={dir}`,
where :samp:`{dir}` is the desired installation directory (usually "``~``" to
indicate your home directory).  You will then need to append
:file:`{dir}/lib/python` to your :envvar:`PYTHONPATH` environment variable.  See the
`Alternate Installation`_ section of the :term:`Python` document "`Installing
Python Modules`_" [InstallingPythonModules]_ for more information, such
as circumstances in which you should use :option:`--prefix` instead of
:option:`--home`.

.. _Alternate Installation: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://docs.python.org/inst/alt-install-windows.html

.. _Installing Python Modules: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://docs.python.org/inst/



   :term:`FiPy` requires at least version 2.3 of :term:`Python`. :term:`FiPy` has not yet
   been tested (and will almost certainly not work) with `Python 3.0`_.

.. _Python 3.0:   http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.python.org/download/releases/3.0/
.. _download: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.python.org/download/

Operating System
================

:term:`FiPy` is `tested regularly`_ on `Mac OS X`_ 10.4 "Tiger" and 10.5 "Leopard",
`Debian Linux`_ 4.0 "etch", `Ubuntu Linux`_ 10.10, and `Windows XP`_. We
welcome reports of compatibility with other systems, particularly if any
additional steps are necessary to install.

.. note::

   Simple instructions for `Mac OS X`_ users are in :ref:`MACOSX-INSTALLATION`.
   Simple instructions for Windows_ users are in :ref:`WINDOWS-INSTALLATION`.

The only elements of :term:`FiPy` that are likely to be platform-dependent
are the viewers, but at least one viewer should work on each platform.
All other aspects should function on any platform that has a recent
:term:`Python` installation.

Many of the packages listed below have prebuilt installers for different
platforms (particularly for Windows).  These installers can save considerable
time and effort compared to configuring and building from source, although
they frequently comprise somewhat older versions of the respective code.
Whether building from source or using a prebuilt installer, please read and
follow explicitly any instructions given in the respective packages'
:file:`README` and :file:`INSTALLATION` files.

.. _tested regularly: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://matforge.org/fipy/build
.. _Mac OS X: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.apple.com/macosx/
.. _Debian Linux: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.debian.org/
.. _RedHat Linux: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.redhat.com/
.. _Ubuntu Linux: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.ubuntu.com/
.. _Windows: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.microsoft.com/windows/
.. _Windows XP: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.microsoft.com/windowsxp/
.. _Windows 2000: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.microsoft.com/windows2000/



------------------
Custom Environment
------------------

---------
Debugging
---------
