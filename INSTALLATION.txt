============
Installation
============

The |FiPy| finite volume PDE solver relies on several third-party packages.
It is *best to obtain and install those first*, before attempting to install
|FiPy|.

.. raw:: html

   <div class="note">
   <p class="admonition-title">Note</p>
   By selecting the links on this page, you will be leaving NIST webspace.
   We have provided these links to other web sites because they may have
   information that would be of interest to you.  No inferences should be
   drawn on account of other sites being referenced, or not, from this
   page.  There may be other web sites that are more appropriate for your
   purpose.  NIST does not necessarily endorse the views expressed, or
   concur with the facts presented on these sites.  Further, NIST does not
   endorse any commercial products that may be mentioned on these sites.
   Please address comments about this page to <a class="reference"
   href="mailto:fipy@nist.gov">fipy@nist.gov</a>.
   </div>

.. note::

   Most of the installation steps will involve a variant on the command::

       $ python setup.py ...

   In addition to the specific commands given here, further information
   about each ``setup.py`` script is available by typing::

       $ python setup.py --help

----------
Privileges
----------

If you do not have administrative privileges on your computer, or if for
any reason you don't want to tamper with your existing Python_
installation, most packages (including |FiPy|) will allow you to install to
an alternate location.  Instead of installing these packages with
``python setup.py install``,
you would use
``python setup.py install --home=<dir>``,
where ``<dir>`` is the desired installation directory (usually "``~``" to
indicate your home directory).  You will then need to append
``<dir>/lib/python`` to your ``PYTHONPATH`` environment variable.  See the
`Alternate Installation`_ section of the Python_ document "`Installing
Python Modules`_" |citeInstallingPythonModules| for more information, such
as circumstances in which you should use ``--prefix`` instead of
``--home``.

.. _Alternate Installation: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://docs.python.org/inst/alt-install-windows.html

.. _Installing Python Modules: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://docs.python.org/inst/


-------------
Prerequisites
-------------

Operating System
================

|FiPy| has been developed and tested on the Unix operating systems `Mac OS
X`_ 10.3 and `Debian Linux`_ 3.0.  We welcome reports of compatibility with
other systems, along with any steps necessary to install.

The only elements of |FiPy| that are likely to be platform-dependent are
the viewers.  All other aspects should function on any platform that has a
recent Python_ installation.

.. _Mac OS X: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.apple.com/macosx/
.. _Debian Linux:   http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.debian.org/

Required Packages
=================

.. warning::

   |FiPy| will not run if the following items are not installed.

Python
------

http://www.python.org/

|FiPy| is written in the Python_ language and requires a Python_
installation to run.  Python_ comes pre-installed on many operating
systems, which you can check by opening a terminal and typing
``python``, *e.g.*::

    $ python
    Python 2.3 (#1, Sep 13 2003, 00:49:11) 
    ...
    Type "help", "copyright", "credits" or "license" for more information.
    >>> 

If necessary, you can download_ and install it for your platform.

.. note::

   |FiPy| requires at least version 2.3 of Python_.

.. _Python:   http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.python.org/
.. _download: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.python.org/download/

Numeric
-------

http://www.numpy.org

Obtain and install the Numeric_ package.  |FiPy| has been tested with
version 23.1 of Numeric_.  The newer Numarray_ package is not
supported at this time.

.. note:: 

   Because of a peculiarity_ in the way that Numeric_ is structured, the
   ``--home=<dir>`` installation option described in Privileges_ will not
   work quite as intended.  To correct this problem, add
   ``<dir>/lib/python/Numeric`` to your ``PYTHONPATH`` environment
   variable.

.. _Numeric:  http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.numpy.org
.. _Numarray: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.stsci.edu/resources/software_hardware/numarray
.. _peculiarity: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.scipy.org/documentation/mailman?fn=scipy-dev/2002-December/thread.html#1443

Recommended Packages
====================

.. note::

   These packages are not required to run |FiPy|, but they can be helpful.

SciPy
-----

http://www.scipy.org/

Significantly improved performance has been achieved with the
judicious use of C language inlining, via the weave_ module of the
SciPy_ package.

In addition, a handful of test cases use functions from the SciPy_ library.

.. _weave: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.scipy.org/documentation/weave/
.. _SciPy: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://www.scipy.org/

gmsh
----

http://www.geuz.org/gmsh/

It is possible to create irregular meshes with this package.

.. warning::

   The `Mac OS X`_ distribution of gmsh provides a nice graphical tool, but
   unfortunately this tool cannot be used by |FiPy|.  Please download the
   source distribution and build the ``gmsh`` command-line tool for your
   platform.

Viewers
=======

|FiPy| will work perfectly well without them, but at least one of the
following packages will be needed to allow viewing the results of |FiPy|
calculations:

Pygist
------

http://bonsai.ims.u-tokyo.ac.jp/~mdehoon/software/python/pygist.html

The Pygist_ package can be used to display simulation results. We have
not succeeded in building the native Pygist_ viewer on `Mac OS X`_ and
recommend building the package with the ``--x11`` option described in
the documentation.

.. _Pygist: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://bonsai.ims.u-tokyo.ac.jp/~mdehoon/software/python/pygist.html

PyX
---

http://pyx.sourceforge.net/

PyX_ allows the production of publication quality graphics with |TeX|
labels. If available, |FiPy| can use this package to view or print
results.

.. _PyX: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://pyx.sourceforge.net/

Gnuplot-py
----------

http://gnuplot-py.sourceforge.net

Gnuplot.py is a Python_ package that interfaces to gnuplot_, the
popular open-source plotting program.

.. _Gnuplot:         http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://gnuplot.sorceforge.net/

----------------
Obtaining |FiPy|
----------------

|FiPy| is freely available for download via CVS_ or as a `compressed
archive`_.  We recommend CVS_ over archives at this early stage of the
development cycle.  To obtain |FiPy| via anonymous CVS, issue the following
commands::

    $ cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/fipy login

and then::

    $ cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/fipy checkout fipy

Further information about CVS_ can be found at
http://sourceforge.net/cvs/?group_id=118428.

.. _compressed archive:   http://www.ctcms.nist.gov/fipy/download/FiPy-0.1.tar.gz

PySparse
========

The |FiPy| archive distribution includes a customized version of `Roman
Geus`_' PySparse_ package.

If you obtained |FiPy| via CVS, you will also need to obtain the customized
PySparse_ via a separate anonymous CVS download::

    $ cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/fipy login

and then::

    $ cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/fipy checkout pysparse

From within the ``pysparse`` base directory, follow its included
instructions for building PySparse_ for your platform.

.. _Roman Geus: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://people.web.psi.ch/geus/
.. _PySparse: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://people.web.psi.ch/geus/pyfemax/pysparse.html

Manual
======

.. raw:: html

   The manual can be found in 
   <tt class="literal"><span class="pre">download/fipy.pdf</span></tt>

You can `download the latest manual`_ or, if you have obtained |FiPy| via
CVS_, a fresh copy can be built by issuing the following command in the
base directory::

    $ python setup.py build_docs --latex --manual

The epydoc_ package and a command-line pdfTeX installation are required in
order to build the manual.

.. _download the latest manual:  http://www.ctcms.nist.gov/fipy/download/fipy.pdf
.. _epydoc:                      http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://epydoc.sourceforge.net/

--------------
Testing |FiPy|
--------------

From the base directory, you can verify that |FiPy| works properly by
executing::

    $ python setup.py test

Depending on the packages you chose to install in `Recommended Packages`_,
be sure to set the appropriate environment variables.  You can expect a few
errors if you did not install all of the recommended packages.

If you chose to install the `weave`_ package, you should rerun the
tests with::

    $ python setup.py test --inline

A few tests will fail the first time as a result of the messages output in
the course of caching the compiled inline code, but a repeat test should
have no failures.

-----------------
Installing |FiPy|
-----------------

Once you are confident that all of the requisite packages have been
installed properly and |FiPy| passes its tests, you can install it by
typing::

    $ python setup.py install

at the command line.  Alternatively, you may choose not to formally install
|FiPy| and to simply work within the base directory instead.  

.. warning::

   Keep in mind that you will then need to preserve your changes when
   upgrades to |FiPy| become available (upgrades via CVS_ will handle this
   issue automatically).

If you wish to develop |FiPy| scripts outside of the distribution
directory, but choose not to formally install |FiPy|, you will need to
ensure that the |FiPy| distribution directory is appended to your
``PYTHONPATH`` environment variable.

------------
Using |FiPy|
------------

To see examples of problems that |FiPy| is capable of solving, you can run
any of the scripts in |examples/|.  All should have appropriate executable
permissions, allowing you to type, *e.g.*::

    $ examples/diffusion/steadyState/mesh1D/input.py

at the command line, which should produce a graphical display of the
solution. 

With judicious use of the weave_ package, we have been able to obtain
significantly improved performance, while keeping the code as clear as
possible.  You can invoke this faster code by passing the ``--inline``
option at the command line, *i.e.*::

    $ examples/diffusion/steadyState/mesh1D/input.py --inline

In order to customize the examples, or to develop your own scripts, some
knowledge of Python syntax is required.  We recommend you familiarize
yourself with the excellent `Python tutorial`_ |citePythonTutorial|.

.. _Python tutorial: http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://docs.python.org/tut/tut.html
.. _CVS:             http://www.nist.gov/cgi-bin/exit_nist.cgi?url=http://cvs.sourceforge.net/viewcvs.py/fipy/

.. include:: utils/include.txt

.. |FiPy| replace:: |htmlFiPy| |latexFiPy|
.. |TeX| replace:: |latexTeX| |htmlTeX|
.. |examples/| replace:: |latexExamples/| |htmlExamples/|

.. |citeInstallingPythonModules| raw:: latex

   \cite{InstallingPythonModules}

.. |citePythonTutorial| raw:: latex

   \cite{PythonTutorial}

